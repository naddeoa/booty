name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["*"]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short_sha_setup.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Save short sha
        shell: bash
        id: short_sha_setup
        run: |
          SHA=$(git rev-parse --short=20 ${{ github.sha }})
          echo "short_sha=$SHA" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.11.6"

      - uses: Gr1N/setup-poetry@v8
        name: Install poetry
        with:
          poetry-version: 1.7.1

      - name: Install python dependencies
        run: poetry install

      - name: Building
        run: make build build-binary-linux

      - name: Check types
        run: make lint

      - name: Check formatting
        run: make format

      # Buiding the container is basically the integ test
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Import SSH Config
        run: |
          mkdir ./ssh/
          echo "${{ secrets.DOCKER_PRIVATE_SSH_KEY }}" > ./ssh/id_rsa
          echo "${{ secrets.DOCKER_KNOWN_HOSTS }}" > ./ssh/known_hosts

      - name: Build main Docker container
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: booty/test${{ github.sha }}

      # The build host is running out of disk space
      - name: Delete docker images and cache
        shell: bash
        run: docker system prune -a -f

  release:
    name: Release
    if: ${{ github.event_name == 'push' }}
    needs: [build, setup]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.save_upload_url.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.short_sha}}
          release_name: Release ${{ needs.setup.outputs.short_sha}}
          draft: false
          prerelease: false
          body: |
            Install with pip:

            ```
            pip install booty-cli
            ```

            Or download a binary below
      - name: Save upload url 
        shell: bash
        id: save_upload_url 
        run: |
          URL=${{ steps.create_release.outputs.upload_url }}
          echo "Setting output to $URL"
          echo "upload_url=$URL" >> "$GITHUB_OUTPUT"

  assets:
    name: Asset upload
    if: ${{ github.event_name == 'push' }}
    needs: [release]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            variant: linux
            BINARY_NAME: booty_linux_x86_64
            BUILD_BINARY_COMMAND: "make build-binary-linux"
          - os: macos-12
            variant: mac_x86_64
            BINARY_NAME: booty_mac_x86_64
            BUILD_BINARY_COMMAND: "make build-binary-mac"
          - os: macos-latest
            variant: mac_universal
            BINARY_NAME: booty_mac_universal
            BUILD_BINARY_COMMAND: "make build-binary-mac-universal"
          # This isn't supported in free accounts
          # - os: macos-13-xlarge
          #   variant: mac_arm64
          #   BINARY_NAME: booty_mac_arm64
          #   BUILD_BINARY_COMMAND: "make build-binary-mac-arm"

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.11.6"

      - uses: Gr1N/setup-poetry@v8
        name: Install poetry
        with:
          poetry-version: 1.7.1

      - name: Install python dependencies
        run: poetry install

      - name: Generate wheels
        run: make build

      - name: Generate exe
        run: |
          ${{ matrix.BUILD_BINARY_COMMAND }}
          chmod +x ./dist/${{ matrix.BINARY_NAME }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.BINARY_NAME }}
          asset_name: ${{ matrix.BINARY_NAME }}
          asset_content_type: application/octet-stream

      - name: PyPi Publish
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: poetry publish -u __token__ -p ${{ secrets.PYPI_KEY }}
